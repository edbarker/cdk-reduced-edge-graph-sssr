CHANGES MADE

05-06-2011

Introduced a way to optimise the selection of the least connected atom. This calculates the connectivities for all atoms in the molecule just once and represents the indices in an array where connectivity[atom][0]=the atom's index and connectivity[atom][1]=total index summed for atom and its neighbours. Then when a bond is removed from connecting atoms - at the start and end of fragmentation step this index is updated. So avoids recalculating at each step - just looks up the connectivity.

For some reason this finds fewer mols at stage one - 227494 now found. Why is this? - needs fixing.

However, speed is increased with this simple change - 143s - 70s faster!

Changed it so that when an atom is deleted the connectivity now becomes 999 so that will not be considered as leastconnected atom. Also realised that when stripmolecule - looks for terminals but this is a waste of time as the seeds are known - the atoms at ends of the cut bond. so made this change.

Bug sort of fixed so now it solves 238147 mols after stage one, but this is still not 239865 I originally had. Why is this? Seem to have 'lost' 1700 mols - so must do something different. Is it worth effort to solve this?

new methods added, or altered:
 
findLeastConnectedAtom(); 	- changed so goes through array now - much quicker 
findConnectivities(); 		- initial function finds connectivities for all atoms - done once only
updateConnectivity(); 		- when bond removed - updates its and neighbour's connectivities

Tested - Changed calculation to 64*Ki+Li - and this finds fewer - 232399 at stage one so do not * by 64.

06/06/2011

Changed it so branching is identified during stripmolecule fraggraph nodes so that atomic number indicates if branching cycle - Type III fragment. This = 32 (Ge).
So in checkbranching - now just check atomic number. However, hardly ever gets to this function - so will not save much time.

Added new array - terminalatoms[fragment][] which keeps number of terminal atoms for fragment and what they are. 

Took some doing this. There is a real problem caused by deleting atoms when stripterminalatoms deletes atoms from mol. This shifts atoms up the atomcontainer and so i have to pass a copy of the original molecule around as a reference to find original positions. There must be a better way of doing this. Maybe don't delete atoms - just bonds.
 
Anyway - very big improvement in efficiency. Now 118s which is 2120 mols processed/s.

09/06/2011

Fixed a number of issues which meant that it was finding more rings than cauchy. This was all to do with checksplittingcomplex. However, This slowed the algorithm back down to 1200 mol/s. So wondering if the loss in speed is worth the fixes - some of the mols failing here just go on to SSSR and it's only for a few of them. But I suppose it is worth doing in the interests of finding correct rings.

Found about six molecules in NCI which cannot avoid finding too many rings. This is again due to the problem where a linear fragment connects a ring at two atoms equidistant from each other in the ring. SO it finds the SSSR plus a few extra rings that are valid but it needs to choose between them and I don't know how to do this. One way might be to canonicalise the finding of the shortest path where there is a choice between two. But how? Have to accept this as an acceptable problem.

  
Found some bugs in the way rings are split which needed fixing. This seems to work fine now.

10/06/2011

Done some time trials with interesting results.

First I wanted to see if the first step of the algorithm could be used with allrings finding. The idea is that for those molecules where there are isolated single rings these could be solved quickly prior to allrings. But this was not possible to test as for the NCI dataset there are numerous complex structures which cause recursion. So any seconds saved are going to be irrelevant. 

It would be interesting to test this idea with an ESSR algorithm but I don't think CDK has one against which I can test.

Then I tested step one of stage one on its own - that is at the end of the fragmentation if rings are found then avoid sssr. 150271 mols are solved in this way (60%) and it turns out that the timetaken is actually the same as by including the second step in stage one. What this means is that it may not be worth doing the extra steps. It also means that it may be possible to revert to an algorithm that is buggy but faster. The question is whether the bugs could cause incorrect ring finding - but previous test where the bug existed did not cause this. All I fixed was where the rings found are greater than cauchy so these will just go to the sssr.

Another thing I looked at which could prove interesting is to use the O(n) time partitioning into rings in the cdk. The idea is that by doing this splitting the linear chains are removed and ring finding becomes more efficient. The extra step involved, although costly in time, could speed it up by finding more molecules. In this way 241448 mols are solved so it does work and the time taken is marginally faster but not significantly so. Possibly this could be used in some way more efficiently.

So I made changes to revert back to an older checksplitting. Checksplitting checks if a smaller ring is contained within a larger one and if so removes the smaller ring from the larger thus creating a new ring. But this does not look at where a larger ring is created and needs to be split by smaller rings found previously. The corrected version added this feature, but it significantly slowed down the algorithm. But then if you left it out it does not mean that wrong rings will be found. it is just that sometimes more rings than the cauchy will be found and these will go through to the sssr, but as this is rare it need not be a problem. Also the old version can still split the larger ring because later additions of linear fragments (which there must be) will split the ring. 

Time trial shows this is the fastest - it solves fewer molecules - 238191 but takes 108s which is 2317 mol/s. 3 times faster than sssr alone. Actually it is 2579 mol/s for the algorithm alone ie on the mols it solves.

Question is - is it correct? Does it find the correct rings. Need to check this next.

Also tried spanning tree idea with this faster method and it is a fair bit slower. So there is no advantage to adding this - unless only do this when fails - but why just to save 2 secs - not worth the effort.


Testing the allgorithm:

Here is how I tested the algorithm. Where the algorithm finds the sssr - see that the sssrFinder finds the same rings. Where the sssr does not find the same rings then this does not mean that the algorithm has failed. The reason may be that the algorithm found a ring which is a valid ring and there is an arbitrary choice between which rings to find. This is always where two linker atoms in a ring are equidistant - so there are two shortest paths. Mismatching therefore is where the algorithm chooses the alternative path. 

There were around 1000 molecules which mismatched. I can't check everyone by eye so to test where there is a mismatch an allrings search is performed on these molecules and if the disputed ring is in the set of all rings I assume that there is no problem. I believe this is correct.

I ran this and found there to be no mismatches. So all rings found are the correct sssr. I'm confident of this.
 
The code therefore I think is finished and ready for whatever testing, tidying up needs doing for it to be included in cdk.

13/06/2011

Well, now I've just realised that it is in fact possible to find the unfound rings very easily without resorting to the sssr finder at all. It is simply a question of removing the bonds of a linear fragment from the original molecule, finding the shortest path between the linkers in whatever is left of the molecule and checking if a unique ring is found, and check splitting of course.

Optimised - by only looking at those linear fragments not already associated with a found ring. And also sometimes there is an alternative shortest path which should give a correct unique ring but the path found is another one - already in a ring. to solve this, if this happens - delete the first shoprtest path from the molecule and see if there is another of the same size - if so try this with a new cycle. Mind you - what if there are more than one of these alternative paths?

After some debugging and optimising I now have an algorithm that solves 250132 mols out of 250251 - so only 93 unsolved. I need to look into why these aren't solved - I think due to the alternative shortest path phenomenon. This is going to be a pig to solve though.

Time trial for this - 55s ie 4550 mol/s!!!!!!!!!

Unbelievable. Must have done something wrong. 

16/06/2011

So now the thing works on this weird structure. What it does is where there are still rings left to find after stage two the linear fragment which is not solved is removed from the molecule. Then it gets all paths between the linker atoms. Now there are a lot of these, and they are not linear paths - they can include cyclic walks. So each path is added to the original linear fragment. The cycle generated is checked that it is unique, and also for splitting. If the cycle passes this test then it is tested to be only one ring - as sometimes multiple rings result. If it passes this test it is added to the list of cycles already found. Then when a number of these cycles have been found they are sorted into order and the first number corresponding to the number of rings sought are returned. 

However, although this works for the weird molecule it is not going to work for others as it is simply wrong. 

The problem is that there could be a situation where an alternative ring to the shortest path could result and this would be chosen but would be wrong. There is no easy solution to this.

My feeling is that if this happens it simply fails and you have to go through to the sssrfinder.

I can't see any easy way to resolve this. You would need to solve the problem of ignoring alternative path cycles.

I think the next stage is to test the algorithm works by finding the right rings, in particular i hadn't looked at the possibility that the ring sizes might not tally even though the allrings does. ie the sssr might find 4,5,5,6 with my algorithm finding 4,5,5,10 where 10 is in the allrings - so this would pass when it shouldn't.

26/06/2011

So the thing is finished now with the algorithm optimised and all known bugs fixed. Tested on a very large dataset.

Found a bug where the removal of furter shortest paths leads to disconnected linkers and so the cdk getshortestpath crashes on this. Fixed this by checking for disconnected components first. However, then I realised this is whole function (finalresolveunfoundcycles) is really potentially buggy so i have removed it and now all are resolved in the resolverarecycles function.

Introduced cyclebondarray to optimise the checksplitting functions - these were O(N^3) but now I think are O(N).

Test worked fine - I think. When the sssr is different ot what is found it carries out an allrings search and checks if the mismatched ring is in this. The assumption is that it is the same size, but I never test this. But now I have fixed this so if it mismatches the cdk's sssr then the all rings which match the cdk-sssr are removed from consideration. This is correct. NCI passes this test which is very encouraging.

Final time trails:

1. barkerSSSRFinder - 117s
2. stages one and two plus CDK SSSR to finish off - 125s

really they are about the same. I think though that it is better to use the first two stages to preprocess the cdk sssr as I cannot be certain it works on very complex (and as yet unseen) molecules, but the cdk's sssr I guess is known to work on these. 

01/07/2011

Found a bug in stage 4. Realised that if there were two linking atoms to the next fragment then it could choose the wrong, longer path and it is doubtful this would be solved at the checksplitting stage. This never causes a problem, but it could do so was removed. 

I changed this so that the sssr finds cycles in the fragment graph and then for each cycle it builds a subgraph made up of all the fragments and finds the sssr for this subgraph by sending it to be solved to the barkerSSSR itself. The danger is that it will cause infinite recursion but this is unlikely as first very few compounds reach this stage and second only very simple subgraphs are sent to be solved. 

To speed it up the algorithm first looks for any cycle containing an unsolved node, then if no new cycles found it tries all cycles.

This seems to work fine.

Also did a time trial with stages 1, 2 and 3 and cdk's sssr and it was 85s so this is very quick.

Next is to do the time trial for the new changes. This was 91s. Which is better than stage 1,2 and cdk sssr (112s).
 

